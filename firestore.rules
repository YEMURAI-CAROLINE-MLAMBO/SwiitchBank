rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    // Function to check if a user has a specific role in a business
    function hasBusinessRole(businessId, requiredRole) {
      return exists(/databases/$(database)/documents/businessAccounts/$(businessId)/teamMembers/$(request.auth.uid)) &&
             get(/databases/$(database)/documents/businessAccounts/$(businessId)/teamMembers/$(request.auth.uid)).data.role == requiredRole;
    }

    // Function to check if a user is a member of a business (any role)
    function isBusinessMember(businessId) {
        return exists(/databases/$(database)/documents/businessAccounts/$(businessId)/teamMembers/$(request.auth.uid));
    }

    match /users/{userId} {
      allow read, update, delete: if request.auth != null && request.auth.uid == userId;
      allow create: if request.auth != null && request.auth.uid == userId &&
                     request.resource.data.firstName is string &&
                     request.resource.data.lastName is string &&
                     request.resource.data.email is string &&
                     request.resource.data.email == request.auth.token.email;

      match /sensitive/{document} {
        allow read: if request.auth != null && request.auth.uid == userId && request.auth.token.email_verified == true;
        allow write: if false;
      }
    }

    match /businessAccounts/{businessId} {
      allow read: if isBusinessMember(businessId);
      allow update: if hasBusinessRole(businessId, 'admin') &&
                       request.resource.data.businessName is string &&
                       request.resource.data.address is string &&
                       request.resource.data.industry is string;

      match /teamMembers/{memberId} {
        allow read: if isBusinessMember(businessId);
        allow create, update, delete: if hasBusinessRole(businessId, 'admin');
      }
    }

    match /wallets/{walletId} {
      allow read: if (request.auth != null && resource.data.userId == request.auth.uid) ||
                     (resource.data.businessId != null && isBusinessMember(resource.data.businessId));

      allow create: if (request.auth != null && request.resource.data.userId == request.auth.uid && request.resource.data.businessId == null &&
                       request.resource.data.balance == 0 &&
                       request.resource.data.currency is string) ||
                       (request.auth != null && request.resource.data.businessId != null && hasBusinessRole(request.resource.data.businessId, 'admin') &&
                       request.resource.data.balance == 0 &&
                       request.resource.data.currency is string);

      allow update: if request.auth != null && resource.data.userId == request.auth.uid &&
                       request.resource.data.balance == resource.data.balance + request.resource.data.incoming_balance;
    }

    match /sessions/{sessionId} {
      allow create: if false;
      allow read, delete: if request.auth != null && request.auth.uid == resource.data.userId;
    }

    match /transactions/{transactionId} {
      function userOwnsWallet(walletId) {
        return exists(/databases/$(database)/documents/wallets/$(walletId)) &&
               get(/databases/$(database)/documents/wallets/$(walletId)).data.userId == request.auth.uid;
      }

      allow read: if request.auth != null &&
                   (userOwnsWallet(resource.data.sourceWalletId) ||
                    userOwnsWallet(resource.data.destinationWalletId) ||
                    (resource.data.businessId != null && isBusinessMember(resource.data.businessId)));
      allow create: if request.auth != null &&
                     (userOwnsWallet(request.resource.data.sourceWalletId) ||
                      userOwnsWallet(request.resource.data.destinationWalletId));
    }
  }
}
