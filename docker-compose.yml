version: '3.8'

services:
  # ===== CORE APPLICATION SERVICES =====
  db:
    image: postgres:14
    container_name: swiitchbank-db
    restart: unless-stopped
    environment:
      POSTGRES_DB: ${DB_NAME:-swiitchbank_prod}
      POSTGRES_USER: ${DB_USER:-swiitchbank_admin}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-your_strong_password}
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./migrations:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER}"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swiitchbank-net

  redis:
    image: redis:6-alpine
    container_name: swiitchbank-redis
    restart: unless-stopped
    command: redis-server --requirepass ${REDIS_PASSWORD:-your_redis_password}
    volumes:
      - redis-data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD:-your_redis_password}", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - swiitchbank-net

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        NODE_ENV: development
    container_name: swiitchbank-backend
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - DB_HOST=db
      - REDIS_URL=redis://default:${REDIS_PASSWORD}@redis:6379
    volumes:
      - ./backend:/app
      - /app/node_modules
      - ./backend/logs:/app/logs
    ports:
      - "5000:5000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - swiitchbank-net
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: swiitchbank-frontend
    restart: unless-stopped
    environment:
      - REACT_APP_API_BASE_URL=http://localhost:5000
    volumes:
      - ./frontend:/app
      - /app/node_modules
    ports:
      - "3000:3000"
    depends_on:
      backend:
        condition: service_healthy
    networks:
      - swiitchbank-net

  # ===== MONITORING & ADMINISTRATION =====
  adminer:
    image: adminer
    container_name: swiitchbank-adminer
    restart: unless-stopped
    ports:
      - "8080:8080"
    depends_on:
      - db
    networks:
      - swiitchbank-net

  prometheus:
    image: prom/prometheus
    container_name: swiitchbank-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    networks:
      - swiitchbank-net

  grafana:
    image: grafana/grafana
    container_name: swiitchbank-grafana
    volumes:
      - ./monitoring/grafana:/var/lib/grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PASSWORD}
    ports:
      - "3001:3000"
    depends_on:
      - prometheus
    networks:
      - swiitchbank-net

  # ===== DEVELOPMENT TOOLS =====
  mailhog:
    image: mailhog/mailhog
    container_name: swiitchbank-mailhog
    ports:
      - "8025:8025"
    networks:
      - swiitchbank-net

  # ===== BACKGROUND WORKERS =====
  worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: swiitchbank-worker
    restart: unless-stopped
    env_file:
      - .env
    environment:
      - NODE_ENV=production
      - ROLE=worker
    command: npm run worker
    volumes:
      - ./backend:/app
      - /app/node_modules
    depends_on:
      - db
      - redis
    networks:
      - swiitchbank-net

  # ===== AI SERVICES =====
  ml-service:
    image: tensorflow/serving
    container_name: swiitchbank-ml
    ports:
      - "8501:8501"
    volumes:
      - ./ai-models:/models
    command: --model_config_file=/models/models.config
    networks:
      - swiitchbank-net

  # ===== REVERSE PROXY =====
  traefik:
    image: traefik:v2.5
    container_name: swiitchbank-proxy
    command:
      - --api.insecure=true
      - --providers.docker
      - --entrypoints.web.address=:80
    ports:
      - "80:80"
      - "8081:8080"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    networks:
      - swiitchbank-net

# ===== VOLUMES & NETWORKS =====
volumes:
  postgres-data:
  redis-data:
  grafana-data:

networks:
  swiitchbank-net:
    driver: bridge